{"version":3,"file":"schedules.js","names":["Holiday","Schedules","schedules","currentDate","admin","arguments","length","undefined","_classCallCheck","_defineProperty","date","Date","holiday","getFullYear","listHoliday","getHoliday","listOtherHoliday","getOtherHoliday","listAdmins","getAdmins","_createClass","key","value","getPreview","size","weekData","Array","preview","setHours","index","month","getMonth","day","getDate","dayWeek","getDay","type","strDate","concat","times","setDate","isOpen","currentType","isFr","split","i","_schedule$period$star","_schedule$period$end","schedule","scheduleType","period","repeat","periodStart","start","periodEnd","end","months","includes","days","some","dayId","time","open","scheduleIsOpen","hour","getHours","minute","getMinutes","strHour","push","concatWeek","week","_this","prevHash","prevKey","prevTime","listDays","forEach","dayKey","hash","JSON","stringify","endArray","notSame","notAllDay","concatMonths","_this2","prevWeek","listMonths","monthKey","concatPeriods","periods","ctx","Object","keys","map","_periods$key","sortWeek","_this3","dayIndex","weekDay","result","_objectSpread","getConcat","_this4","globalWeek","fill","_periods$period","monthIndex","_schedule$period","global"],"sources":["../../src/schedules.ts"],"sourcesContent":["import { Holiday } from \"./holiday\";\n\nexport interface Schedule {\n  days: Array<number>;\n  months: Array<number>;\n  period: { start: string | null, end: string | null, repeat: boolean | null },\n  time: { open: number, start: string | null, end: string | null },\n  type: number,\n}\n\nexport class Schedules {\n\n  private listHoliday: Array<String> = [];\n  private listOtherHoliday: Array<String> = [];\n  private listAdmins: Array<String> = [];\n\n  private schedules: Array<Schedule> = [];\n  private admin: string | null = null;\n\n  private date: Date;\n\n  private dayIndex: Array<number> = [6, 0, 1, 2, 3, 4, 5, 7];\n  private dayKey: Array<number> = [1, 2, 3, 4, 5, 6, 0, 7];\n  \n  private monthIndex: Array<number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  private monthKey: Array<number> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n  constructor(schedules: Array<Schedule>, currentDate: string, admin: string | null = null) {\n    this.schedules = schedules;\n    this.date = new Date(currentDate);\n    this.admin = admin;\n\n    const holiday = new Holiday(this.date.getFullYear());\n    this.listHoliday = holiday.getHoliday();\n    this.listOtherHoliday = holiday.getOtherHoliday();\n    this.listAdmins = holiday.getAdmins();\n  }\n\n  /**\n    * Retourne l'état actuelle de l'horaires ainsi que la liste des horaires correspondant au jour renseigné\n    * @param {number} size Length of the preview (7 day by default)\n    * @returns {Object}\n    */\n  getPreview(size: number = 7): Object {\n    if (!size) return {};\n\n    const weekData = new Array(size);\n    const preview = new Array(size);\n\n    const date = new Date(this.date);\n    date.setHours(0, 0, 0, 0);\n\n    for (let index = 0; index < size; index++) {\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      const dayWeek = date.getDay();\n      weekData[index] = {\n        type: 0,\n        date: new Date(date),\n        strDate: `${month < 10 ? `0${month}` : month}-${day < 10 ? `0${day}` : day}`,\n        month,\n        dayWeek,\n      };     \n      preview[index] = {\n        day: dayWeek,\n        times: [],\n      };\n      date.setDate(date.getDate() + 1);\n    }\n\n    let isOpen = null;\n    let currentType = null;\n\n    const isFr = this.admin ? this.admin.split('-')[0] === 'FR' : false\n    for (let i = 0; i < this.schedules.length; i += 1) {\n      const schedule: Schedule = this.schedules[i];\n\n      let scheduleType = schedule.type === 2 && !schedule.period.repeat ? 10 : schedule.type;\n\n      const periodStart = new Date(schedule.period.start ?? 0);\n      periodStart.setHours(0, 0, 0, 0);\n      const periodEnd = new Date(schedule.period.end ?? 0);\n      periodEnd.setHours(23, 59, 59, 999);\n\n\n      for (let index = 0; index < weekData.length; index++) {\n        // Periods or Months\n        if (schedule.type === 2) {\n          if (weekData[index].date < periodStart || weekData[index].date > periodEnd) {\n            continue;\n          }\n        } else if (schedule.type === 1 && !schedule.months.includes(weekData[index].month)) {\n          continue;\n        }\n\n        // Days\n        if (!schedule.days.includes(weekData[index].dayWeek)) {\n          if (schedule.days.some((dayId) => dayId === 7) && isFr) {\n            if (!this.listHoliday.includes(weekData[index].strDate)) {\n              if (!this.admin || !this.listAdmins.includes(this.admin) || !this.listOtherHoliday.includes(weekData[index].strDate)) {\n                continue;\n              }\n            }\n          } else {\n            continue;\n          }\n        }\n\n        // Time\n        if (scheduleType >= weekData[index].type) {\n          const start = schedule.time.start;\n          const end = schedule.time.end;\n          const open = !!schedule.time.open;\n\n          // Today state\n          let scheduleIsOpen = null;\n          if (index === 0) {\n            const hour = this.date.getHours();\n            const minute = this.date.getMinutes();\n            const strHour = `${hour < 10 ? `0${hour}` : hour}:${minute < 10 ? `0${minute}` : minute}`;\n            if (start && end) {\n                if (start <= strHour && strHour < end){\n                  scheduleIsOpen = open;\n                } else {\n                  scheduleIsOpen = false;\n                }\n            } else {\n              scheduleIsOpen = open;\n            }\n            currentType = schedule.type;\n          }\n\n          // Add or override schedule\n          if (scheduleType === weekData[index].type) {\n            preview[index].times.push({\n              open,\n              start,\n              end\n            });\n            if (index === 0) {\n              isOpen = isOpen ?? scheduleIsOpen;\n            }\n          } else if (scheduleType > weekData[index].type) {\n            weekData[index].type = scheduleType;\n            preview[index].times = [{\n              open,\n              start,\n              end\n            }];\n            if (index === 0) {\n              isOpen = scheduleIsOpen;\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      isOpen,\n      type: currentType,\n      preview,\n    };\n  }\n\n  /**\n   * Consecutive days with the same schedule are grouped \n   * (public holidays are not grouped unless is schedules is the same as the other day of the week)\n   */\n  concatWeek(week: Array<Array<Object> | null> | null): Array<Object> | null {\n    const concatWeek: Array<object> = [];\n    let start: number | null = null;\n    let prevHash: string | null = null;\n    let prevKey: number | null = null;\n    let prevTime: Array<Object> | null = null;\n    let listDays: Array<number> = [];\n\n    week?.forEach((times: any, index) => {\n      const key = this.dayKey[index];\n\n      const hash: string = JSON.stringify(times);\n      const endArray = week.length - 1 === index;\n      const notSame = (prevHash && prevHash !== hash);\n\n      if (start === null) {\n        start = key;\n      } else if (notSame || endArray) {\n        const notAllDay = key === 7 && (notSame || start !== 1);\n        let end: number | null = notSame || notAllDay ? prevKey : key;\n\n        if (!notSame) {\n          listDays.push(key);\n        }\n        \n        concatWeek.push({\n          days: listDays,\n          start,\n          end: end !== start ? end : null,\n          times: prevTime\n        })\n\n        start = key;\n        listDays = [];\n\n        if (notAllDay) {\n          concatWeek.push({\n            days: [start],\n            start,\n            end: null,\n            times,\n          })\n        }\n      } \n\n      prevHash = hash;\n      prevKey = key;\n      prevTime = times;\n      listDays.push(key);\n    })\n\n    return concatWeek.length ? concatWeek : null;\n  }\n\n  /**\n   * Consecutive months with the same schedule are grouped\n   */\n  concatMonths(months: Array<Array<Array<Object> | null>>): Array<Object> {\n    const concatMonths: Array<object> = [];\n    let start: number | null = null;\n    let prevHash: string | null = null;\n    let prevKey: number | null = null;\n    let prevWeek: Array<Array<Object> | null> | null = null;\n    let listMonths: Array<number> = [];\n\n    months.forEach((week: any, index) => {\n      const key = this.monthKey[index];\n      const hash: string = JSON.stringify(week);\n      const endArray = months.length - 1 === index;\n      const notSame = (prevHash && prevHash !== hash);\n\n      if (start === null) {\n        start = key;\n      } else if (notSame || endArray) {\n        const end = notSame ? prevKey : key;\n        if (!notSame) {\n          listMonths.push(key);\n        }\n  \n        concatMonths.push({\n          start,\n          end: end !== start ? end : null,\n          months: listMonths,\n          week: this.concatWeek(prevWeek)\n        })\n\n        start = key;\n        listMonths = [];\n\n        if (notSame && endArray) {\n          concatMonths.push({\n            start,\n            end: null,\n            months: [start],\n            week: this.concatWeek(week)\n          })\n        }\n      } \n\n      prevHash = hash;\n      prevKey = key;\n      prevWeek = week;\n      listMonths.push(key);\n    })\n\n    return concatMonths;\n  }\n\n  /**\n   * Transform periods object in array \n   */\n  concatPeriods(periods: any): Array<Object> {\n    const ctx = this;\n    return Object.keys(periods)\n      .map((key) => {\n        const { start, end, repeat, week } = periods[key];\n        return {\n          start,\n          end: end !== start ? end : null,\n          repeat,\n          week: ctx.concatWeek(week)\n        };\n      });\n  }\n\n  /**\n   * Sort by day\n   * @param {Array} week \n   * @param {Schedule} schedule \n   */\n  sortWeek(week: Array<Array<Object> | null>, schedule: Schedule): void {\n    schedule.days.forEach((day) => {\n      const index = this.dayIndex[day];\n      const weekDay = week[index];\n      const result = { ...schedule.time , open: !!schedule.time.open}\n      if (weekDay) {\n        weekDay.push(result);\n      } else {\n        week[index] = [result];\n      }\n    });\n  }\n\n  /**\n   * @returns All schedules in a concatenated format\n   */\n  getConcat(): Object {\n    const globalWeek = new Array(8).fill(null);\n    const months = new Array(12).fill(null);\n    const periods: any = {};\n\n    this.schedules.forEach((schedule) => {\n      switch (schedule.type) {\n        case 0:\n          this.sortWeek(globalWeek, schedule);\n          break;\n        case 1:\n          // Sort by month\n          schedule.months.forEach((month) => {\n            const index = this.monthIndex[month];\n            let week = months[index];\n            if (!week) {\n              week = new Array(8).fill(null);\n              months[index] = week;\n            }\n            this.sortWeek(week, schedule);\n          });\n          break;\n        case 2:\n          // Sort by periods\n          const {start, end, repeat} = schedule.period;\n          const period = `${repeat}_${start}_${end}`;\n\n          let week = periods[period]?.week;\n          if (!week) {\n            week = new Array(8).fill(null);\n            periods[period] = {\n              start,\n              end,\n              repeat,\n              week\n            };\n          }\n          this.sortWeek(week, schedule);\n          break;\n        default:\n          break;\n      }\n    });\n\n    return {\n      global: this.concatWeek(globalWeek),\n      months: this.concatMonths(months),\n      periods: this.concatPeriods(periods),\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]}