{"version":3,"file":"parser.js","names":["constant","_interopRequireWildcard","require","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","_typeof","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","isRuleModifier","isTime","isWeekDay","isMonth","parser","oh","date","currentDate","Date","schedules","listRules","split","forEach","ruleSequence","schedule","days","months","period","start","end","repeat","time","open","type","parts","index","length","test","status","scheduleStatus","find","name","id","listTimes","listDay","day","scheduleDay","scheduleDays","push","listMonths","month","scheduleMonth","scheduleMonths","splice","concat","getFullYear","monthStart","strStart","monthEnd","strEnd","startDate","endDate"],"sources":["../../src/parser.ts"],"sourcesContent":["import * as constant from \"./constant\";\nimport { Schedule } from \"./schedules\";\n\nconst isRuleModifier = /^(open|closed)$/;\nconst isTime = /^(([01][0-9])|(2[0-3])):[0-5][0-9]-(([01][0-9])|(2[0-3])):[0-5][0-9]$/;\nconst isWeekDay = /^((Mo|Tu|We|Th|Fr|Sa|Su|PH),?)+$/;\nconst isMonth = /^((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec),?)+$/;\n\n/**\n * Créé une liste d'objets horaires à partir du format opening_hour\n * @param {string} oh oh\n * @param {string | null} date date utilisé pour les périodes répétable, celle du device par défauts\n * @returns une liste d'horaires si opening_hour valide, null sinon\n */\nexport function parser(oh: string, date: string | null): Array<Schedule> | null {\n  const currentDate = date ? new Date(date) : new Date();\n  const schedules: Array<Schedule> = [];\n  const listRules = oh.split(';');\n  listRules.forEach((ruleSequence) => {\n    const schedule: Schedule = {\n      days: [],\n      months: [],\n      period: { start: null, end: null, repeat: null },\n      time: { open: 0, start: null, end: null },\n      type: 0,\n    };\n\n    const parts = ruleSequence.split(' ');\n    let index = parts.length - 1;\n\n    // Status\n    if (index >= 0 && isRuleModifier.test(parts[index])) {\n      const status = constant.scheduleStatus.find((status) => status.name === parts[index]);\n      if (!status) return null;\n      schedule.time.open = status.id;\n      index -= 1;\n    }\n\n    // Heure minute\n    if (index >= 0 && isTime.test(parts[index])) {\n      const listTimes = parts[index].split('-');\n      schedule.time.start = listTimes[0];\n      schedule.time.end = listTimes[1];\n      index -= 1;\n    }\n\n    // Jour\n    if (index >= 0 && isWeekDay.test(parts[index])) {\n      const listDay = parts[index].split(',');\n      listDay.forEach((day) => {\n        const scheduleDay = constant.scheduleDays.find((scheduleDay) => scheduleDay.name === day);\n        if (!scheduleDay) return null;\n        schedule.days.push(scheduleDay.id);\n      });\n      index -= 1;\n    }\n\n    // Mois\n    if (index >= 0 && isMonth.test(parts[index])) {\n      schedule.type = 1;\n      const listMonths = parts[index].split(',');\n      listMonths.forEach((month) => {\n        const scheduleMonth = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.name === month);\n        if (!scheduleMonth) return null;\n        schedule.months.push(scheduleMonth.id);\n      });\n      index -= 1;\n    }\n\n    // Période\n    if (index >= 0) {\n      schedule.type = 2;\n      if (index === 4) {\n        parts.splice(0, 0, `${currentDate.getFullYear()}`);\n        parts.splice(4, 0, `${currentDate.getFullYear()}`);\n        schedule.period.repeat = true;\n      } else {\n        schedule.period.repeat = false;\n      }\n\n      const monthStart = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.name === parts[1]);\n      if (!monthStart) return null;\n      let strStart = monthStart.id < 10 ? `0${monthStart.id}` : monthStart.id;\n\n      const monthEnd = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.name === parts[5]);\n      if (!monthEnd) return null;\n      let strEnd = monthEnd.id < 10 ? `0${monthEnd.id}` : monthEnd.id;\n\n      const startDate = `${strStart}-${parts[2]}`;\n      const endDate = `${strEnd}-${parts[6]}`;\n      if (startDate > endDate) {\n        parts[4] = `${currentDate.getFullYear() + 1}`;\n      }\n      \n      schedule.period.start = `${parts[0]}-${startDate}`;\n      schedule.period.end = `${parts[4]}-${endDate}`;\n    }\n    schedules.push(schedule);\n  });\n  return schedules;\n}\n"],"mappings":"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","ignoreList":[]}